// Copyright (c) AerafalGit 2025.
// Jade licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.

using Jade.SourceGenerators.Infrastructure;
using Microsoft.CodeAnalysis;

namespace Jade.SourceGenerators.Components;

/// <summary>
/// A source generator for creating ECS (Entity Component System) components and masks.
/// </summary>
[Generator(LanguageNames.CSharp)]
internal sealed class ComponentGenerator : IIncrementalGenerator
{
    /// <summary>
    /// The name of the internal assembly used for source generation.
    /// </summary>
    private const string InternalAssemblyName = "Jade";

    /// <summary>
    /// The maximum number of overloads supported for generated methods.
    /// </summary>
    private const int MaxOverloadsCount = 25;

    /// <summary>
    /// Initializes the source generator and registers the generation logic.
    /// </summary>
    /// <param name="context">The context for incremental source generation.</param>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var isSourceAssembly = context.CompilationProvider.Select(static (compilation, _) => compilation.Assembly.Name is InternalAssemblyName);

        context.RegisterImplementationSourceOutput(isSourceAssembly, static (spc, isSourceAssembly) =>
        {
            if (!isSourceAssembly)
                return;

            GenerateComponentStructs(spc);
            GenerateCreateMethodOfComponentMask(spc);
        });
    }

    /// <summary>
    /// Generates the component structs for the ECS system.
    /// </summary>
    /// <param name="spc">The context for source production.</param>
    private static void GenerateComponentStructs(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Components;")
            .AppendLine();

        for (var i = 2; i <= MaxOverloadsCount; i++)
        {
            var typeNumbers = Enumerable.Range(1, i).ToArray();

            builder
                .AppendLine("[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Sequential)]")
                .AppendLine("public ref struct Components<{0}>", string.Join(", ", typeNumbers.Select(static x => $"T{x}")));

            using (builder.CreateScope())
            {
                foreach (var typeNumber in typeNumbers)
                    builder
                        .AppendIndentedLine("public ref T{0} Component{0};", typeNumber)
                        .AppendLine();

                builder.AppendIndentedLine("public Components({0})", string.Join(", ", typeNumbers.Select(static x => $"ref T{x} component{x}")));

                using (builder.CreateScope())
                {
                    foreach (var typeNumber in typeNumbers)
                        builder.AppendIndentedLine("Component{0} = ref component{0};", typeNumber);
                }
            }

            if (i is not MaxOverloadsCount)
                builder.AppendLine();
        }

        spc.AddSource("Components.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates the `Create` method for the `ComponentMask` struct.
    /// </summary>
    /// <param name="spc">The context for source production.</param>
    private static void GenerateCreateMethodOfComponentMask(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Components;")
            .AppendLine()
            .AppendLine("public readonly partial struct ComponentMask");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder.AppendIndentedLine("public static global::Jade.Ecs.Components.ComponentMask Create<{0}>()", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine("return new global::Jade.Ecs.Components.ComponentMask()")
                        .Indent();

                    for (var j = 0; j < typeNumbers.Length; j++)
                        builder.AppendIndentedLine(".With(global::Jade.Ecs.Components.Component<T{0}>.Id){1}", typeNumbers[j], j >= typeNumbers.Length - 1 ? ";" : string.Empty);

                    builder.Unindent();
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("ComponentMask.Create.g.cs", builder.ToSourceText());
    }
}

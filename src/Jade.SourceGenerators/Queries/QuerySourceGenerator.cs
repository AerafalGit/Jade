// Copyright (c) AerafalGit 2025.
// Jade licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.

using Jade.SourceGenerators.Infrastructure;
using Microsoft.CodeAnalysis;

namespace Jade.SourceGenerators.Queries;

/// <summary>
/// A source generator for creating query-related code in the ECS (Entity Component System).
/// Generates query actions, query overloads, and other related code.
/// </summary>
[Generator(LanguageNames.CSharp)]
internal sealed class QuerySourceGenerator : IIncrementalGenerator
{
    /// <summary>
    /// The name of the internal assembly for which the source generator is intended.
    /// </summary>
    private const string InternalAssemblyName = "Jade";

    /// <summary>
    /// The maximum number of overloads to generate for query-related methods.
    /// </summary>
    private const int MaxOverloadsCount = 25;

    /// <summary>
    /// Initializes the source generator with the provided context.
    /// </summary>
    /// <param name="context">The initialization context for the incremental generator.</param>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var isSourceAssembly = context.CompilationProvider.Select(static (compilation, _) => compilation.Assembly.Name is InternalAssemblyName);

        context.RegisterImplementationSourceOutput(isSourceAssembly, static (spc, isSourceAssembly) =>
        {
            if (!isSourceAssembly)
                return;

            GenerateQueryActions(spc);
            GenerateQueryOverloads(spc);
        });
    }

    /// <summary>
    /// Generates query actions and adds them to the source production context.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryActions(SourceProductionContext spc)
    {
        GenerateQueryAction(spc);
        GenerateQueryEntityAction(spc);
    }

    /// <summary>
    /// Generates query action delegates for various overloads.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryAction(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine();

        for (var i = 1; i <= MaxOverloadsCount; i++)
        {
            var typeNumbers = Enumerable.Range(1, i).ToArray();
            var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

            builder.AppendLine("public delegate void QueryAction<{0}>({1});", typeArguments, string.Join(", ", typeNumbers.Select(static x => $"scoped ref T{x} component{x}")));

            if (i is not MaxOverloadsCount)
                builder.AppendLine();
        }

        spc.AddSource("QueryAction.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates query entity action delegates for various overloads.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryEntityAction(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public delegate void QueryEntityAction(scoped in Entity entity);")
            .AppendLine();

        for (var i = 1; i <= MaxOverloadsCount; i++)
        {
            var typeNumbers = Enumerable.Range(1, i).ToArray();
            var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

            builder.AppendLine("public delegate void QueryEntityAction<{0}>(scoped in Entity entity, {1});", typeArguments,
                string.Join(", ", typeNumbers.Select(static x => $"scoped ref T{x} component{x}")));

            if (i is not MaxOverloadsCount)
                builder.AppendLine();
        }

        spc.AddSource("QueryEntityAction.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates query overloads and adds them to the source production context.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryOverloads(SourceProductionContext spc)
    {
        GenerateQueryAllOverloads(spc);
        GenerateQueryAnyOverloads(spc);
        GenerateQueryNoneOverloads(spc);
        GenerateQueryForEachAllOverloads(spc);
    }

    /// <summary>
    /// Generates "All" query overloads for filtering components.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryAllOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder
                    .AppendIndentedLine("[global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute]")
                    .AppendIndentedLine("public ref global::Jade.Ecs.Queries.Query All<{0}>()", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine("_all = _all")
                        .Indent();

                    for (var j = 0; j < typeNumbers.Length; j++)
                        builder.AppendIndentedLine(".With(global::Jade.Ecs.Components.Component<T{0}>.Id){1}", typeNumbers[j], j >= typeNumbers.Length - 1 ? ";" : string.Empty);

                    builder
                        .Unindent()
                        .AppendIndentedLine("return ref this;");
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.All.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "Any" query overloads for filtering components.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryAnyOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder
                    .AppendIndentedLine("[global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute]")
                    .AppendIndentedLine("public ref global::Jade.Ecs.Queries.Query Any<{0}>()", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine("_any = _any")
                        .Indent();

                    for (var j = 0; j < typeNumbers.Length; j++)
                        builder.AppendIndentedLine(".With(global::Jade.Ecs.Components.Component<T{0}>.Id){1}", typeNumbers[j], j >= typeNumbers.Length - 1 ? ";" : string.Empty);

                    builder
                        .Unindent()
                        .AppendIndentedLine("return ref this;");
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.Any.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "None" query overloads for filtering components.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryNoneOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder
                    .AppendIndentedLine("[global::System.Diagnostics.CodeAnalysis.UnscopedRefAttribute]")
                    .AppendIndentedLine("public ref global::Jade.Ecs.Queries.Query None<{0}>()", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine("_none = _none")
                        .Indent();

                    for (var j = 0; j < typeNumbers.Length; j++)
                        builder.AppendIndentedLine(".With(global::Jade.Ecs.Components.Component<T{0}>.Id){1}", typeNumbers[j], j >= typeNumbers.Length - 1 ? ";" : string.Empty);

                    builder
                        .Unindent()
                        .AppendIndentedLine("return ref this;");
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.None.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "ForEach" query overloads for iterating over components.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryForEachAllOverloads(SourceProductionContext spc)
    {
        GenerateQueryForEachOverloads(spc);
        GenerateQueryForEachEntityOverloads(spc);
        GenerateQueryForEachParallelOverloads(spc);
        GenerateQueryForEachEntityParallelOverloads(spc);
    }

    /// <summary>
    /// Generates "ForEach" query overloads for iterating over components.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryForEachOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder.AppendIndentedLine("public readonly void ForEach<{0}>(global::Jade.Ecs.Queries.QueryAction<{0}> action)", typeArguments);

                using (builder.CreateScope())
                {
                    builder.AppendIndentedLine("foreach (var archetype in _world.GetMatchingArchetypes(in _all, in _any, in _none))");

                    using (builder.CreateScope())
                    {
                        builder.AppendIndentedLine("foreach (var chunk in archetype.Chunks)");

                        using (builder.CreateScope())
                        {
                            builder
                                .AppendIndentedLine("if (chunk.IsEmpty)")
                                .Indent()
                                .AppendIndentedLine("continue;")
                                .Unindent()
                                .AppendLine();

                            foreach (var number in typeNumbers)
                                builder.AppendIndentedLine("var span{0} = chunk.GetSpan<T{0}>();", number);

                            builder
                                .AppendLine()
                                .AppendIndentedLine("for (var i = 0; i < chunk.Count; i++)")
                                .Indent()
                                .AppendIndentedLine("action({0});", string.Join(", ", typeNumbers.Select(static x => $"ref span{x}[i]")))
                                .Unindent();
                        }
                    }
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.ForEach.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "ForEach" query overloads for iterating over components and entities.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryForEachEntityOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder.AppendIndentedLine("public readonly void ForEach<{0}>(global::Jade.Ecs.Queries.QueryEntityAction<{0}> action)", typeArguments);

                using (builder.CreateScope())
                {
                    builder.AppendIndentedLine("foreach (var archetype in _world.GetMatchingArchetypes(in _all, in _any, in _none))");

                    using (builder.CreateScope())
                    {
                        builder.AppendIndentedLine("foreach (var chunk in archetype.Chunks)");

                        using (builder.CreateScope())
                        {
                            builder
                                .AppendIndentedLine("if (chunk.IsEmpty)")
                                .Indent()
                                .AppendIndentedLine("continue;")
                                .Unindent()
                                .AppendLine()
                                .AppendIndentedLine("var entities = chunk.Entities;");

                            foreach (var number in typeNumbers)
                                builder.AppendIndentedLine("var span{0} = chunk.GetSpan<T{0}>();", number);

                            builder
                                .AppendLine()
                                .AppendIndentedLine("for (var i = 0; i < chunk.Count; i++)")
                                .Indent()
                                .AppendIndentedLine("action(in entities[i], {0});", string.Join(", ", typeNumbers.Select(static x => $"ref span{x}[i]")))
                                .Unindent();
                        }
                    }
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.ForEachEntity.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "ForEachParallel" query overloads for iterating over components in parallel.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryForEachParallelOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("#nullable enable")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder.AppendIndentedLine("public readonly void ForEachParallel<{0}>(global::Jade.Ecs.Queries.QueryAction<{0}> action, global::System.Threading.Tasks.ParallelOptions? options = null)", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine(
                            "options ??= new global::System.Threading.Tasks.ParallelOptions { MaxDegreeOfParallelism = global::System.Environment.ProcessorCount };")
                        .AppendLine()
                        .AppendIndentedLine("global::System.Threading.Tasks.Parallel.ForEach(_world.GetMatchingArchetypes(in _all, in _any, in _none), options, archetype =>")
                        .AppendIndentedLine('{')
                        .Indent();

                    builder
                        .AppendIndentedLine("global::System.Threading.Tasks.Parallel.ForEach(archetype.Chunks, options, chunk =>")
                        .AppendIndentedLine('{')
                        .Indent();

                    builder
                        .AppendIndentedLine("if (chunk.IsEmpty)")
                        .Indent()
                        .AppendIndentedLine("return;")
                        .Unindent()
                        .AppendLine();

                    foreach (var number in typeNumbers)
                        builder.AppendIndentedLine("var span{0} = chunk.GetSpan<T{0}>();", number);

                    builder
                        .AppendLine()
                        .AppendIndentedLine("for (var i = 0; i < chunk.Count; i++)")
                        .Indent()
                        .AppendIndentedLine("action({0});", string.Join(", ", typeNumbers.Select(static x => $"ref span{x}[i]")))
                        .Unindent()
                        .Unindent()
                        .AppendIndentedLine("});")
                        .Unindent()
                        .AppendIndentedLine("});");
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.ForEachParallel.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates "ForEachParallel" query overloads for iterating over components and entities in parallel.
    /// </summary>
    /// <param name="spc">The source production context.</param>
    private static void GenerateQueryForEachEntityParallelOverloads(SourceProductionContext spc)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// Copyright (c) AerafalGit 2025.")
            .AppendLine("// Jade licenses this file to you under the MIT license.")
            .AppendLine("// See the license here https://github.com/AerafalGit/Jade/blob/main/LICENSE.")
            .AppendLine()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("#nullable enable")
            .AppendLine()
            .AppendLine("namespace Jade.Ecs.Queries;")
            .AppendLine()
            .AppendLine("public ref partial struct Query");

        using (builder.CreateScope())
        {
            for (var i = 1; i <= MaxOverloadsCount; i++)
            {
                var typeNumbers = Enumerable.Range(1, i).ToArray();
                var typeArguments = string.Join(", ", typeNumbers.Select(static x => $"T{x}"));

                builder.AppendIndentedLine("public readonly void ForEachParallel<{0}>(global::Jade.Ecs.Queries.QueryEntityAction<{0}> action, global::System.Threading.Tasks.ParallelOptions? options = null)", typeArguments);

                using (builder.CreateScope())
                {
                    builder
                        .AppendIndentedLine(
                            "options ??= new global::System.Threading.Tasks.ParallelOptions { MaxDegreeOfParallelism = global::System.Environment.ProcessorCount };")
                        .AppendLine()
                        .AppendIndentedLine("global::System.Threading.Tasks.Parallel.ForEach(_world.GetMatchingArchetypes(in _all, in _any, in _none), options, archetype =>")
                        .AppendIndentedLine('{')
                        .Indent();

                    builder
                        .AppendIndentedLine("global::System.Threading.Tasks.Parallel.ForEach(archetype.Chunks, options, chunk =>")
                        .AppendIndentedLine('{')
                        .Indent();

                    builder
                        .AppendIndentedLine("if (chunk.IsEmpty)")
                        .Indent()
                        .AppendIndentedLine("return;")
                        .Unindent()
                        .AppendLine()
                        .AppendIndentedLine("var entities = chunk.Entities;");

                    foreach (var number in typeNumbers)
                        builder.AppendIndentedLine("var span{0} = chunk.GetSpan<T{0}>();", number);

                    builder
                        .AppendLine()
                        .AppendIndentedLine("for (var i = 0; i < chunk.Count; i++)")
                        .Indent()
                        .AppendIndentedLine("action(in entities[i], {0});", string.Join(", ", typeNumbers.Select(static x => $"ref span{x}[i]")))
                        .Unindent()
                        .Unindent()
                        .AppendIndentedLine("});")
                        .Unindent()
                        .AppendIndentedLine("});");
                }

                if (i is not MaxOverloadsCount)
                    builder.AppendLine();
            }
        }

        spc.AddSource("Query.ForEachEntityParallel.g.cs", builder.ToSourceText());
    }
}
